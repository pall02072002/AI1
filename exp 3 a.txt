import networkx as nx
import matplotlib.pyplot as plt
import heapq
def a_star(graph, start, goal, heuristic):
 open_set = [] # Priority queue
 heapq.heappush(open_set, (0, start))
 
 came_from = {}
 g_score = {node: float('inf') for node in graph}
 g_score[start] = 0
 
 f_score = {node: float('inf') for node in graph}
 f_score[start] = heuristic[start]
 
 while open_set:
 _, current = heapq.heappop(open_set)
 
 if current == goal:
 path = []
 total_cost = 0
 while current in came_from:
 path.append(current)
 total_cost += graph[came_from[current]][current]
 current = came_from[current]
 path.append(start)
 path.reverse()
 print("Minimum Distance:", total_cost)
 return path
 
 for neighbor, cost in graph[current].items():
 tentative_g_score = g_score[current] + cost
 if tentative_g_score < g_score[neighbor]:
 came_from[neighbor] = current
 g_score[neighbor] = tentative_g_score
 f_score[neighbor] = tentative_g_score + heuristic[neighbor]
 heapq.heappush(open_set, (f_score[neighbor], neighbor))
 
 return None # No path found
# Define the graph as an adjacency list with costs
graph = {
 'S': {'B': 4, 'C': 3},
 'B': {'F': 5, 'E': 12},
 'C': {'E': 10, 'D': 7},
 'D': {'E': 2},
 'E': {'G': 5},
 'F': {'G': 16},
 'G': {}
}
# Heuristic values (assumed based on the image)
heuristic = {'S': 14, 'B': 12, 'C': 11, 'D': 6, 'E': 4, 'F': 11, 'G': 0}
# Run A*
start, goal = 'S', 'G'
path = a_star(graph, start, goal, heuristic)
print("A* Path:", path)
# Visualization
def draw_graph(graph, path):
 G = nx.DiGraph()
 
 # Add edges with weights
 for node in graph:
 for neighbor, weight in graph[node].items():
 G.add_edge(node, neighbor, weight=weight)
 
 # Custom positions for nodes
 pos = {
 'S': (0, 2),
 'B': (1, 3),
 'C': (1, 1),
 'D': (2, 0),
 'E': (2, 2),
 'F': (3, 3),
 'G': (4, 2)
 }
 
 plt.figure(figsize=(10, 7))
 # Custom colors for nodes and edges
 node_colors = ['#FF6347' if node in path else '#A0CBE2' for node in G.nodes()]
 edge_colors = ['#FF6347' if (u, v) in zip(path, path[1:]) else '#A9A9A9' for u, v in
G.edges()]
 # Draw the nodes and edges with custom colors
 nx.draw_networkx_nodes(G, pos, node_color=node_colors, node_size=3000, alpha=0.7)
 nx.draw_networkx_edges(G, pos, edge_color=edge_colors, width=2, alpha=0.7)
 
 # Add labels for nodes
 nx.draw_networkx_labels(G, pos, font_size=16, font_weight='bold')
 # Add edge labels (weights)
 edge_labels = {(u, v): f"{d['weight']}" for u, v, d in G.edges(data=True)}
 nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, font_size=12,
font_weight='bold')
 # Title
 plt.title("Customized A* Path Visualization", fontsize=16, fontweight='bold')
 plt.axis('off') # Hide axes for better visual appearance
 plt.show()
# Draw the graph with the A* path
draw_graph(graph, path)